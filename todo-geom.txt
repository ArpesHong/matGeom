TODO list for GEOM

nom du projet global : "matGeom" (pour Matlab Geometry)

Mettre en place le site Sourceforge
===================================

- trouver un logo pour SourceForge (2011.02.17)

- faire une release pour figer l'impl.

- generer la doc, la mettre sur le site

- reflechir a convention pour les angles : radians ou degres ? (2011.03.12)
    + avantages : 
        * plus intuitif
        * plus coherent par rapport a la plupart des fonctions Matlab
    + idee generale : 
        * garder les radians pour les fonctions de bas niveau (angles entre
            droites, entre plans...)
        * utiliser des degres pour representer les formes
        * ellipses et ellipsoides d'inertie renvoient des degres
        * angles d'Euler utilisent des degres
        * rotations utilisent des degres -> plus precis pour angles proches des
            mutliples de 90°
    + faire ca dans une release ulterieure
   

geom2d
======
    
- pour les fonctions de dessin, prevoir : (2010.07.02)
    + option de trace sous forme de chaine simple
    + option de trace sous forme de couple 'param' + 'value'

- 2011.03.15 prevoir fonctions de sauvegarde / chargement des formes, ex:
    + parseShape(string) : renvoie une forme
    + readShape(filename) : renvoie un ensemble de formes (comment ?)
    + printShape(shape) : renvoie une chaine de caractères
        * "shapeToString" ?
    + saveShape(shape, fileName)

- 2011.03.15 reincorporer la Toolbox "graphs2d" (apres un peu de menage...)

 
polygons2d
==========

- polygonAverage (2010.07.05)
    - prend en entree un tableau de cellules de polygones, ou alors plusieurs
        polygones, 
    - calcule la moyenne des coordonnees de chaque sommet.
    - 2011.03.20 add pointSetAverage ?

- (2011.03.15) gerer les formes de type 'pointSet'
    + "pointSetBounds", qui renvoie un box
    + "pointSetDiameter" (2011.02.06)
        * en entree, un ensemble de points, et un angle (radians ?)
        * en sortie, le diamètre mesuré dans la direction spécifiée
    + inclure au package 'polygons2d' ?
    
- fonction "enclosingRectangle" pour un ensemble de points (2011.02.06)
    -> "orientedBox" ?
    -> renvoie centre, Longueur, largeur, et orientation
            
- clipping de polygones (2010.08.10)
    
- polygonTriangulate ? (2010.07.28)

- reprendre doc pour la 'position' des polygones et polylines (2010.07.05)

- structure de donnees geom pour stocker des points type polygone, en reprenant
    idee du kdtree
    voir par exemple polygones avec ensembles de points ayant la meme direction ?
    ou decouper par tranches de polylignes ayant un "petit" bounding box
    -> polygones monotones
    

geom3d
======
   
- Conventions pour les angles 3d pas geniales... (2010.07.28)
    ex: drawCircle3d: theta+phi+psi
    pas vraiment de lien avec les angles d'Euler.
        2011.03.21 si, mais convention ZYZ, qui est pertinente aussi...
    
- Prposition de convention pour les angles (2011.03.12)
    - partir sur angles d'Euler en convention XYZ (yaw-pitch-roll), base [0 0 0]
    - stocker dans cet ordre
        * centre
        * taille
        * orientation (yaw, pitch roll dans cet ordre)
    - et appliquer les transfos dans cet ordre :
        * Rotation autour Ox (roll),
        * Rotation autour Oy (pitch),
        * Rotation autour Oz (yaw),
        * scaling
        * recentrage
    - Avantages :
        * on applique les transfos de la fin vers le debut
        * yaw plus intuitif que roll en premier ?
        * marche bien pour des objets orientes selon leur axe d'inertie 
    - pour les objets "plats" (cercles et ellipses 3D), ca semble moins
        pertinent...
        
- faire le point sur les differentes orientations d'axe 3D (2010.07.22)
    + X droite, Y fond, Z haut
    + X droite, Y haut, Z avant

- (2011.02.17) fitting functions 
    + fitPlane
    + fitLine3d
    
                
meshes3d
========
        
- meshes and polyhedra:
    + (2010.10.06) document vertex position and edge and faces adjacencies for
        typical meshes 
    + add 'createDurerPolyhedron'
    
- ajouter des fonctions specifiques aux meshes:
    * meshSubdivide (pour trimesh) (2010.06.20)
    * vertexNormal (2010.06.20)
    * clipMesh (2010.12.06)
        -> keep only faces with all vertices within box (simple version)
        -> clip each face, and create a new mesh with clipped faces.
    * distancePointMesh     
