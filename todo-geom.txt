TODO list for MATGEOM

nom du projet global : "matGeom" (pour Matlab Geometry)

Mettre en place le site Sourceforge
===================================

* trouver un logo pour SourceForge (2011.02.17)
    * carre triangle rond ?

* Create an "obsolete" subpackage
    * maybe "obsolete2d" and "obsolete3d"

* recuperer quelques polygones de test


geom2d
======

* 2011.10.09 update doc pour transformVector

* 2011.10.09 generaliser transformPoint/Vector pour ND

* 2010.07.02 pour les fonctions de dessin, prevoir :
    * option de trace sous forme de chaine simple
    * option de trace sous forme de couple 'param' + 'value'

* 2011.04.26 mise a jour de la page angles2d pour les conventions

* 2011.10.09 isPointOnXXX : convention pas claire pour 2 tableaux...

* 2011.11.15 stienenDiagram : convertit un ensemble de points en un ensemble de disques


polygons2d
==========
    
* findPoint : 
    2011.05.30 renvoyer un ou plusieurs indices, et n'accepter qu'un
        seul point en entree
    2011.05.30 fonction findClosestPoint, qui renvoie indice et eventuellement
        les coordonnees du point le plus proche dans un ensemble

* gerer les formes de type 'pointSet'
    + 2011.02.06 "pointSetDiameter"
        * en entree, un ensemble de points, et un angle (radians ?)
        * en sortie, le diamètre mesuré dans la direction spécifiée
    + inclure au package 'polygons2d'
    
* 2011.02.06 fonction "enclosingRectangle" pour un ensemble de points 
    -> "orientedBox" ?
    -> renvoie centre, Longueur, largeur, et orientation (en degres)
            
* 2010.08.10 clipping de polygones
    * 2011.09.25 voir les algos d'opérations booléennes, type Vatti
    
* 2010.07.05 reprendre doc pour la 'position' des polygones et polylines

* structure de donnees geom pour stocker des points type polygone, en reprenant
    idee du kdtree
    voir par exemple polygones avec ensembles de points ayant la meme direction ?
    ou decouper par tranches de polylignes ayant un "petit" bounding box
    -> polygones monotones
    
* 2011.11.06 drawPolygon: add an option to draw vertices, using special style
    for first vertex    


ioshapes
====

* 2011.03.15 prevoir fonctions de sauvegarde / chargement des formes, ex:
* mettre dans un package 'ioshapes'
* strategie 1 : une forme par fichier
* strategie 2 : une forme par ligne

* readPolygon, writePolygon -> tableau '2D', avec header 1 ligne
* readPolyline, writePolyline -> tableau '2D'
* writeShape, readShape -> utilise structure de donnees 'type+data+style'
* readShape(filename) : renvoie un ensemble de formes (comment ?)
* printShape(shape) : renvoie une chaine de caractères
    * "shapeToString" ?
* saveShape(shape, fileName)

* readWKT(f)
* fprintWKT(f, shape)
* parseShape(string) : renvoie une forme

* gui : ShapeView


Splines2D
====

* 2011.10.09 ajouter fonction "drawPath", qui gere M, L, Q, C.

* 2011.10.09 ajouter fonction de conversion spline vers polyline
    + specifier nb points ou "resolution" ?
    * cubicSplineToPolyline
    * quadSplineToPolyline
    * cubicSplineBounds ?
    * creer repertoire "splines2d" (pour MatGeom-1.2)
    
        
Fourier Contours 2D
=====
        
* 2011.11.14 creer des fonctions autour de "fourierContour" ?
    * nom du module : "fourierContours2d"
    * defini par un ensemble de coefficients complexes (paire ou aimpaire...)
    * [COEFS INERTIA] = fourierContour(POLYGON) 
        -> calcule les coefs a partir des points
    * drawFourierContour(COEFS), drawFourierContour(COEFS, NPTS)
    * S = fourierContourSpectrum(COEFS) 
        -> calcule le module des coefs
    * I = fourierContourInertia(COEFS) 
        -> calcule module du spectre
    * COEFS2 = fourierContourKeepCoefs(COEFS, N)
    * COEFS2 = fourierContourKeepInertia(COEFS, PERCENT)
    * PT = fourierContourPoint(COEFS, POS)
    * PT = fourierContourCenter(COEFS)
        -> conversion du coef 1 vers coordonnees 2D
    * VECT = fourierCoutourTangent(FC, POS)
    * KAPPA = fourierCoutourCurvature(FC, POS)
    * L = fourierCoutourLength(FC) 
        -> calcule longueur par intégration du jacobien
    
    
graphs
======

* 2011.05.22 homogeneiser prefixes des fonctions: 'graphXXX' -> 'grXXX'
    ou alors garder prefixe 'graph' pour fonction de mesure générales sur le
    graph (ex: graphDiameter, graphRadius)

   
polynomialCurves2d
==================

* 2011.04.04 update polynomialCurveSetFit (use script in gens/Jasmine/wings)

* 2011.04.04 manage drawing styles in drawPolynomialCurve


geom3d
======
  
* (2011.02.17) fitting functions 
    + fitPlane
    + fitLine3d
    
* 2011.08.17 polygonCentroid3d: better algorithm is possible

* 2011.08.17 implement polygonArea3d

* 2011.10.11 implement intersectLineTriangle3d, intersectRayTriangle3d

             
meshes3d
========

* 2011.08.23 create triMeshArea3d, based on triangleArea3d
        
* 2010.10.06 document vertex position and edge and faces adjacencies for
    typical meshes 
    
* 'createDurerPolyhedron'
    
* distancePointMesh
    + 2011.04.07 distancePointTriangle3d

* 2010.06.20 meshSubdivide (pour trimesh)

* 2010.06.20 vertexNormal

* 2010.12.06 clipMesh
    -> clip each face, and create a new mesh with clipped faces.

* 2011.04.07 function for creating triangular mesh for a sphere
     createSphereMesh ?
     
* 2011.10.21 transform a "grid mesh" (x, y, z) to a quadmesh or trimesh (V, F)

* 2011.10.21 merge some vertices of a mesh
    * [V2 F2] = mergeMergeVertices(V, F, MERGE_INDICES)

* 2011.10.21 readMesh, readMesh_ply, readMesh_off

